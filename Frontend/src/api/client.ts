/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ClientBase {
  public getBaseUrl(baseUrl: string) {
    return baseUrl ? baseUrl : (process.env.REACT_APP_API_URL as string);
  }
}

export class MatchesClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    getAll(): Promise<MatchDto[]> {
        let url_ = this.baseUrl + "/Matches";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<MatchDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(MatchDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MatchDto[]>(<any>null);
    }

    create(dto: MatchDto): Promise<MatchDto> {
        let url_ = this.baseUrl + "/Matches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<MatchDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MatchDto.fromJS(resultData200) : new MatchDto();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MatchDto>(<any>null);
    }

    getById(id: string): Promise<MatchDto> {
        let url_ = this.baseUrl + "/Matches/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<MatchDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MatchDto.fromJS(resultData200) : new MatchDto();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MatchDto>(<any>null);
    }

    update(id: string, dto: MatchDto): Promise<MatchDto> {
        let url_ = this.baseUrl + "/Matches/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<MatchDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MatchDto.fromJS(resultData200) : new MatchDto();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MatchDto>(<any>null);
    }

    delete(id: string): Promise<void> {
        let url_ = this.baseUrl + "/Matches/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export abstract class EntityBaseDto implements IEntityBaseDto {
    id!: string;

    constructor(data?: IEntityBaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityBaseDto {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'EntityBaseDto' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityBaseDto {
    id: string;
}

export class MatchDto extends EntityBaseDto implements IMatchDto {
    startTime!: Date;
    player1!: string;
    player2!: string;
    game1!: GameDto;
    game2!: GameDto;
    game3!: GameDto;
    game4!: GameDto;
    game5!: GameDto;

    constructor(data?: IMatchDto) {
        super(data);
        if (!data) {
            this.game1 = new GameDto();
            this.game2 = new GameDto();
            this.game3 = new GameDto();
            this.game4 = new GameDto();
            this.game5 = new GameDto();
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.startTime = data["startTime"] ? new Date(data["startTime"].toString()) : <any>undefined;
            this.player1 = data["player1"];
            this.player2 = data["player2"];
            this.game1 = data["game1"] ? GameDto.fromJS(data["game1"]) : new GameDto();
            this.game2 = data["game2"] ? GameDto.fromJS(data["game2"]) : new GameDto();
            this.game3 = data["game3"] ? GameDto.fromJS(data["game3"]) : new GameDto();
            this.game4 = data["game4"] ? GameDto.fromJS(data["game4"]) : new GameDto();
            this.game5 = data["game5"] ? GameDto.fromJS(data["game5"]) : new GameDto();
        }
    }

    static fromJS(data: any): MatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new MatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["player1"] = this.player1;
        data["player2"] = this.player2;
        data["game1"] = this.game1 ? this.game1.toJSON() : <any>undefined;
        data["game2"] = this.game2 ? this.game2.toJSON() : <any>undefined;
        data["game3"] = this.game3 ? this.game3.toJSON() : <any>undefined;
        data["game4"] = this.game4 ? this.game4.toJSON() : <any>undefined;
        data["game5"] = this.game5 ? this.game5.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IMatchDto extends IEntityBaseDto {
    startTime: Date;
    player1: string;
    player2: string;
    game1: GameDto;
    game2: GameDto;
    game3: GameDto;
    game4: GameDto;
    game5: GameDto;
}

export class GameDto extends EntityBaseDto implements IGameDto {
    player1Score!: number;
    player2Score!: number;

    constructor(data?: IGameDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.player1Score = data["player1Score"];
            this.player2Score = data["player2Score"];
        }
    }

    static fromJS(data: any): GameDto {
        data = typeof data === 'object' ? data : {};
        let result = new GameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["player1Score"] = this.player1Score;
        data["player2Score"] = this.player2Score;
        super.toJSON(data);
        return data; 
    }
}

export interface IGameDto extends IEntityBaseDto {
    player1Score: number;
    player2Score: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}